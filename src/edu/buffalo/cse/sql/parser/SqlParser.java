/* Generated By:JavaCC: Do not edit this line. SqlParser.java */
package edu.buffalo.cse.sql.parser;
import java.awt.List;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import edu.buffalo.cse.sql.Schema;
import edu.buffalo.cse.sql.plan.*;
import edu.buffalo.cse.sql.parser.*;

public class SqlParser implements SqlParserConstants {
	Map<String, Schema.TableFromFile> tables = new HashMap<String, Schema.TableFromFile>();
	PlanNode q;
	public ParserOutput initParser()throws ParseException, TokenMgrError
	{


		tables= createTableStatement();
		q= selectStatement();

		ParserOutput parserOutput = new ParserOutput(tables,q);
		return parserOutput;
	}

	//SPECIAL_TOKEN : {<COMMENT:("#")+(<TNAME>)+("#")+>}
	@SuppressWarnings("null")
	final public PlanNode selectStatement() throws ParseException {
		Token value1,value2,operator1,operator2,value3,AggregateValue1,TableName1,TableName2,AggregateValue2,AggregateValue;
		ArrayList<String> TAblelist = new ArrayList<String>();
		ArrayList<String> ColumnNames = new ArrayList<String>();
		Token ColumnName,TableName,binaryOperator,booleanOperator,comparison1,comparison2;
		Token ColumnName2;
		NullSourceNode child_1;
		ProjectionNode query_0;
		PlanNode rhs_2;
		ProjectionNode lhs_1;
		ProjectionNode projectionNode;
		NullSourceNode child_3;
		UnionNode unionNode;
		SelectionNode selectionNode_c;
		ArrayList<JoinNode> joinNodeList = new ArrayList<JoinNode>();
		ArrayList<ScanNode> scanNodeList = new ArrayList<ScanNode>();
		ArrayList<SelectionNode> selectionNodeList = new ArrayList<SelectionNode>();
		ArrayList<AggregateNode>aggregateNodeList= new ArrayList<AggregateNode>();
		ArrayList<ProjectionNode> projectionNodeList = new ArrayList<ProjectionNode>();
		ScanNode  scanNode_c;// =new ScanNode[]{};
		JoinNode joinNode_c;
		Token TableName3,TableName4,ColumnName1,ColumnName3,ColumnName4,TableName5,TableName6,ColumnName5,ColumnName6,booleanOperator1,booleanOperator2;// = {new JoinNode()};
		int noOfVarLeaf=1,noBool=0;

		//JoinNode child_join;
		label_0:
		while (true) {
			switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
			case SELECTCMD:
				;
				break;
			default:
				jj_la1[1] = jj_gen;
				break label_0;
			}
		jj_consume_token(SELECTCMD);
		switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
		case OBRA:
			jj_consume_token(OBRA);
			//open brace
			value1 = jj_consume_token(FLOATING_POINT_LITERAL);
			operator1 = jj_consume_token(BINARYOPERATOR);
			value2 = jj_consume_token(FLOATING_POINT_LITERAL);
			jj_consume_token(CBRA);
			operator2 = jj_consume_token(BINARYOPERATOR);
			value3 = jj_consume_token(FLOATING_POINT_LITERAL);
			jj_consume_token(SEMICOLON);
			jj_consume_token(0);
			child_1 = new NullSourceNode(1);
			query_0 = new ProjectionNode();


			query_0.addColumn(new ProjectionNode.Column("EXPR", new ExprTree(ExprTree.OpCode.MULT, new ExprTree(ExprTree.OpCode.ADD, new ExprTree.ConstLeaf(Integer.parseInt(value1.image)), new ExprTree.ConstLeaf(Integer.parseInt(value2.image))), new ExprTree.ConstLeaf(Integer.parseInt((value3.image))))));
			query_0.setChild(child_1);


			{if (true) return query_0;}
			break;
		case FLOATING_POINT_LITERAL:
			value1 = jj_consume_token(FLOATING_POINT_LITERAL);
			child_1 = new NullSourceNode(1);
			query_0 = new ProjectionNode();
			switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
			case SEMICOLON:
				jj_consume_token(SEMICOLON);
				jj_consume_token(0);
				 
				query_0.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf(Float.parseFloat(value1.image))));
				query_0.setChild(child_1);
				{if (true) return query_0;}
				break;
			case AS:
				jj_consume_token(AS);
				ColumnName = jj_consume_token(COLNAME);
				switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
				case SEMICOLON:
					jj_consume_token(SEMICOLON);
					jj_consume_token(0);
					query_0.addColumn(new ProjectionNode.Column(ColumnName.image, new ExprTree.ConstLeaf(Integer.parseInt(value1.image))));
					query_0.setChild(child_1);
					{if (true) return query_0;}
					break;
				case UNION:
					jj_consume_token(UNION);
					child_3 = new NullSourceNode(1);
					lhs_1 = new ProjectionNode();
					lhs_1.addColumn(new ProjectionNode.Column(ColumnName.image, new ExprTree.ConstLeaf(Integer.parseInt(value1.image))));
					lhs_1.setChild(child_3);
					rhs_2 = (ProjectionNode) selectStatement();
					unionNode = new UnionNode();
					unionNode.setLHS(lhs_1);
					unionNode.setRHS(rhs_2);
					{if (true) return unionNode;}
					break;
				case COMMA:
					jj_consume_token(COMMA);
					value2 = jj_consume_token(FLOATING_POINT_LITERAL);
					jj_consume_token(AS);
					ColumnName2 = jj_consume_token(COLNAME);
					child_3 = new NullSourceNode(1);
					lhs_1 = new ProjectionNode();
					lhs_1.addColumn(new ProjectionNode.Column(ColumnName.image, new ExprTree.ConstLeaf(Integer.parseInt(value1.image))));
					lhs_1.addColumn(new ProjectionNode.Column(ColumnName2.image, new ExprTree.ConstLeaf(Integer.parseInt(value2.image))));
					lhs_1.setChild(child_3);
					switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
					case UNION:
						jj_consume_token(UNION);
						rhs_2 = (PlanNode)selectStatement();
						unionNode = new UnionNode();
						unionNode.setLHS(lhs_1);
						unionNode.setRHS(rhs_2);
						{if (true) return unionNode;}
						break;
					case SEMICOLON:
						jj_consume_token(SEMICOLON);
						jj_consume_token(0);
						{if (true) return lhs_1;}
						break;
					default:
						jj_la1[0] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();

					}
					break;
				default:
					jj_la1[0] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
			case BINARYOPERATOR:
				operator1=jj_consume_token(BINARYOPERATOR);
				value2 = jj_consume_token(FLOATING_POINT_LITERAL);
				jj_consume_token(SEMICOLON);
				jj_consume_token(0);
				if(operator1.image.equals("+"))
				{query_0.addColumn(new ProjectionNode.Column("EXPR", new ExprTree(ExprTree.OpCode.ADD, new ExprTree.ConstLeaf(Integer.parseInt(value1.image)), new ExprTree.ConstLeaf(Integer.parseInt(value2.image)))));
				query_0.setChild(child_1);}
				else if(operator1.image.equals("*"))
				{query_0.addColumn(new ProjectionNode.Column("EXPR", new ExprTree(ExprTree.OpCode.MULT, new ExprTree.ConstLeaf(Integer.parseInt(value1.image)), new ExprTree.ConstLeaf(Integer.parseInt(value2.image)))));
				query_0.setChild(child_1);}
				{if (true) return query_0;}
				break;
			default:
				jj_la1[0] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			break;

		case BOOLEAN_LITERALS:
			value1 = jj_consume_token(BOOLEAN_LITERALS);
			switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
			case SEMICOLON:	
				jj_consume_token(SEMICOLON);
				jj_consume_token(0);
				child_1 = new NullSourceNode(1);
				query_0 = new ProjectionNode();
				query_0.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf(Boolean.parseBoolean(value1.image))));
				query_0.setChild(child_1);
				{if (true) return query_0;}
				break;
			case BOOLEAN_OPERATORS:
				value2 = jj_consume_token(BOOLEAN_OPERATORS);
				value3 = jj_consume_token(BOOLEAN_LITERALS);
				jj_consume_token(SEMICOLON);
				jj_consume_token(0);
				child_1 = new NullSourceNode(1);
				query_0 = new ProjectionNode();
				if(value2.image.equals("AND")) 
				{query_0.addColumn(new ProjectionNode.Column("EXPR", new ExprTree(ExprTree.OpCode.AND, new ExprTree.ConstLeaf(Boolean.parseBoolean(value1.image)), new ExprTree.ConstLeaf(Boolean.parseBoolean(value3.image)))));
				query_0.setChild(child_1);}
				else if(value2.image.equals("OR")) 
				{query_0.addColumn(new ProjectionNode.Column("EXPR", new ExprTree(ExprTree.OpCode.OR, new ExprTree.ConstLeaf(Boolean.parseBoolean(value1.image)), new ExprTree.ConstLeaf(Boolean.parseBoolean(value3.image)))));
				query_0.setChild(child_1);}
				{if (true) return query_0;}
				break;
			default:
				jj_la1[0] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		case NOT:
			jj_consume_token(NOT);
			value1 = jj_consume_token(BOOLEAN_LITERALS);
			jj_consume_token(SEMICOLON);
			jj_consume_token(0);
			child_1 = new NullSourceNode(1);
			query_0 = new ProjectionNode();
			query_0.addColumn(new ProjectionNode.Column("EXPR", new ExprTree(ExprTree.OpCode.NOT, new ExprTree.ConstLeaf(Boolean.parseBoolean(value1.image)))));
			query_0.setChild(child_1);
			{if (true) return query_0;}
			break;
		case STRING_LITERAL:
			value1 = jj_consume_token(STRING_LITERAL);
			switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
			case SEMICOLON:
				jj_consume_token(SEMICOLON);
				jj_consume_token(0);
				child_1 = new NullSourceNode(1);
				query_0 = new ProjectionNode();
				query_0.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf(value1.image)));
				query_0.setChild(child_1);
				{if (true) return query_0;}
				break;
			case COMMA:
			case FROM:
				label_1:
					while (true) {
						switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
						case COMMA:
							;
							break;
						default:
							jj_la1[0] = jj_gen;
							break label_1;
						}
						jj_consume_token(COMMA);
						ColumnName = jj_consume_token(COLNAME);
					}
			jj_consume_token(FROM);
			TableName = jj_consume_token(COLNAME);
			label_2:
				while (true) {
					switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
					case UNION:
						;
						break;
					default:
						jj_la1[1] = jj_gen;
						break label_2;
					}
					jj_consume_token(UNION);
				}
			jj_consume_token(SEMICOLON);
			jj_consume_token(0);
			break;
			}//jj_consume_token(SEMICOLON);
			//jj_consume_token(0);
			child_1 = new NullSourceNode(1);
			query_0 = new ProjectionNode();
			query_0.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf(value1.image)));
			query_0.setChild(child_1);
			{if (true) return query_0;}
			break;
		case COLNAME:
			value1 = jj_consume_token(COLNAME);
			ColumnNames.add(value1.image);
			switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
			case SEMICOLON:
				jj_consume_token(SEMICOLON);
				jj_consume_token(0);
				child_1 = new NullSourceNode(1);
				query_0 = new ProjectionNode();
				query_0.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf(value1.image)));
				query_0.setChild(child_1);
				{if (true) return query_0;}
				break;
			case COMMA:
			case FROM:
				label_1:
					while (true) {
						switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
						case COMMA:
							;
							break;
						default:
							jj_la1[0] = jj_gen;
							break label_1;
						}
						jj_consume_token(COMMA);
						//ColumnNames.add(value1.image);
						ColumnName = jj_consume_token(COLNAME);
						ColumnNames.add(ColumnName.image);
					}
			jj_consume_token(FROM);
			projectionNode = new ProjectionNode();
			// ColumnNames.add(value1.image);
			for(String entry:ColumnNames)
			{projectionNode.addColumn(new ProjectionNode.Column(entry, new ExprTree.VarLeaf(null, entry)));
			}
			projectionNodeList.add(projectionNode);
			//lhs_1.addColumn(new ProjectionNode.Column(ColumnNames.get(1), new ExprTree.VarLeaf(null, "B")));
			//lhs_1.setChild(childs_3);
			TableName1 = jj_consume_token(COLNAME);
			TAblelist.add(TableName1.image);
			ScanNode scanNode1 = new ScanNode(TableName1.image, TableName1.image, tables.get(TableName1.image));
			scanNodeList.add(scanNode1);
			label_2:
				while (true) {
					switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
					case COMMA:
						;
						break;
					default:
						jj_la1[1] = jj_gen;
						break label_2;
					}
					jj_consume_token(COMMA);joinNode_c = new JoinNode();
					joinNodeList.add(joinNode_c);
					TableName2 = jj_consume_token(COLNAME);
					TAblelist.add(TableName2.image);

					//ColumnNames.add(ColumnName.image);
					/*  ScanNode childs_3 = new ScanNode(TableName.image,TableName.image , tables.get(TableName.image));
				    lhs_1 = new ProjectionNode();
				   // ColumnNames.add(value1.image);
				    for(String entry:ColumnNames)
				    {lhs_1.addColumn(new ProjectionNode.Column(entry, new ExprTree.VarLeaf(null, entry)));
				    }//lhs_1.addColumn(new ProjectionNode.Column(ColumnNames.get(1), new ExprTree.VarLeaf(null, "B")));
				    lhs_1.setChild(childs_3);*/
					label_3:
						while (true) {
							switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
							case WHERE:
								;
								break;
							default:
								jj_la1[2] = jj_gen;
								break label_3;
							}
							jj_consume_token(WHERE);
							label_4:
								while (true) {
									switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
									case OBRA:
										;
										break;
									default:
										jj_la1[3] = jj_gen;
										break label_4;
									}
									jj_consume_token(OBRA);
								}
							TableName1 = jj_consume_token(COLNAME);
							jj_consume_token(DOT);
							ColumnName1 = jj_consume_token(COLNAME);
							jj_consume_token(BOOLEAN_COMPARISON);
							TableName2 = jj_consume_token(COLNAME);
							jj_consume_token(DOT);
							ColumnName2 = jj_consume_token(COLNAME);
							label_5:
								while (true) {
									switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
									case CBRA:
										;
										break;
									default:
										jj_la1[4] = jj_gen;
										break label_5;
									}
									jj_consume_token(CBRA);
									jj_consume_token(BOOLEAN_OPERATORS);
									jj_consume_token(OBRA);
									TableName3 = jj_consume_token(COLNAME);
									jj_consume_token(DOT);
									ColumnName3 = jj_consume_token(COLNAME);
									jj_consume_token(BOOLEAN_COMPARISON);
									TableName4 = jj_consume_token(COLNAME);
									jj_consume_token(DOT);
									ColumnName4 = jj_consume_token(COLNAME);
									jj_consume_token(CBRA);
								}
						}
				}
			label_6:
				while (true) {
					switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
					case JOIN:
						;
						break;
					default:
						jj_la1[5] = jj_gen;
						break label_6;
					}
					jj_consume_token(JOIN);
					ColumnName2 = jj_consume_token(COLNAME);
					jj_consume_token(ON);
					TableName1 = jj_consume_token(COLNAME);
					jj_consume_token(DOT);
					ColumnName1 = jj_consume_token(COLNAME);
					jj_consume_token(BOOLEAN_COMPARISON);
					TableName2 = jj_consume_token(COLNAME);
					jj_consume_token(DOT);
					ColumnName2 = jj_consume_token(COLNAME);
				}
				label_7:
					while (true) {
						switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
						case UNION:
							;
							break;
						default:
							jj_la1[6] = jj_gen;
							break label_7;
						}
						jj_consume_token(UNION);
						projectionNodeList.get(0).setChild(scanNodeList.get(0));
						rhs_2 = (PlanNode)selectStatement();
						unionNode = new UnionNode();
						unionNode.setLHS(projectionNodeList.get(0));
						unionNode.setRHS(rhs_2);
						{if (true) return unionNode;}
						break;
					}
				jj_consume_token(SEMICOLON);
				projectionNodeList.get(0).setChild(scanNodeList.get(0));
				jj_consume_token(0);
				{if (true) return projectionNodeList.get(0);}
				break;
			case DOT:
				jj_consume_token(DOT);
				ColumnNames.clear();
				ColumnName = jj_consume_token(COLNAME);  
				ColumnNames.add(ColumnName.image);
				switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
				case SEMICOLON:
					jj_consume_token(SEMICOLON);
					jj_consume_token(0);
					child_1 = new NullSourceNode(1);
					query_0 = new ProjectionNode();
					query_0.addColumn(new ProjectionNode.Column("EXPR", new ExprTree.ConstLeaf(ColumnName.image)));
					query_0.setChild(child_1);
					{if (true) return query_0;}
					break;
				case COMMA:
				case FROM:
					label_1:
						while (true) {
							switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
							case COMMA:
								;
								break;
							default:
								jj_la1[0] = jj_gen;
								break label_1;
							}
							jj_consume_token(COMMA);
							ColumnName = jj_consume_token(COLNAME);
							//ColumnNames.add(ColumnName.image);
							jj_consume_token(DOT);
							ColumnName=jj_consume_token(COLNAME);
							ColumnNames.add(ColumnName.image);
						}
				jj_consume_token(FROM);
				projectionNode = new ProjectionNode();
				// ColumnNames.add(value1.image);
				for(String entry:ColumnNames)
				{projectionNode.addColumn(new ProjectionNode.Column(entry, new ExprTree.VarLeaf(null, entry)));
				}
				projectionNodeList.add(projectionNode);
				TableName1 = jj_consume_token(COLNAME);
				 scanNode1 = new ScanNode(TableName1.image, TableName1.image, tables.get(TableName1.image));
				scanNodeList.add(scanNode1);
				label_2:
					while (true) {
						switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
						case COMMA:        ////replacing union by comma
							;
							break;
						default:
							jj_la1[1] = jj_gen;
							break label_2;
						}
						jj_consume_token(COMMA);
						joinNode_c = new JoinNode();
						joinNodeList.add(joinNode_c);
						TableName2 = jj_consume_token(COLNAME);
						scanNode1 = new ScanNode(TableName2.image, TableName2.image, tables.get(TableName2.image));
						scanNodeList.add(scanNode1);
						//ScanNode lhs_2 = new ScanNode(TableName1.image, TableName1.image, tables.get(TableName1.image));
						//ScanNode rhs_3 = new ScanNode(TableName2.image, TableName2.image, tables.get(TableName2.image));
						/*JoinNode child_join = new JoinNode();
						child_join.setLHS(lhs_2);
						child_join.setRHS(rhs_3);
						ProjectionNode query_result = new ProjectionNode();
						query_result.addColumn(new ProjectionNode.Column(ColumnNames.get(0), new ExprTree.VarLeaf(TableName1.image, ColumnNames.get(0))));
						query_result.addColumn(new ProjectionNode.Column(ColumnNames.get(1), new ExprTree.VarLeaf(TableName2.image, ColumnNames.get(1))));
						query_result.setChild(child_join);*/
						label_3:
							while (true) {
								switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
								case WHERE:
									;
									break;
								default:
									jj_la1[2] = jj_gen;
									break label_3;
								}
								jj_consume_token(WHERE);
								//setting lhs rhs of join node
								if(joinNodeList.size()>0)
								{joinNodeList.get(0).setLHS(scanNodeList.get(0));
								joinNodeList.get(0).setRHS(scanNodeList.get(1));
								for(int i=2;i<scanNodeList.size();i++)
								{
									joinNodeList.get(i-1).setLHS(joinNodeList.get(i-2));
									joinNodeList.get(i-1).setRHS(scanNodeList.get(i));
								}}
								
								label_4:
									while (true) {
										switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
										case OBRA:
											;
											break;
										default:
											jj_la1[3] = jj_gen;
											break label_4;
										}
										jj_consume_token(OBRA);
									}
								TableName1 = jj_consume_token(COLNAME);
								jj_consume_token(DOT);
								ColumnName1 = jj_consume_token(COLNAME);
								comparison1=jj_consume_token(BOOLEAN_COMPARISON);
								TableName2 = jj_consume_token(COLNAME);
								jj_consume_token(DOT);
								ColumnName2 = jj_consume_token(COLNAME);
								
								label_5:
									while (true) {
										switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
										case CBRA:
											;
											break;
										default:
											jj_la1[4] = jj_gen;
											 selectionNode_c = new SelectionNode(new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(TableName1.image, ColumnName1.image), new ExprTree.VarLeaf(TableName2.image, ColumnName2.image)));
											selectionNodeList.add(selectionNode_c);
											break label_5;
										}
										jj_consume_token(CBRA);
										booleanOperator1=jj_consume_token(BOOLEAN_OPERATORS);
										//jj_consume_token(OBRA);
										label_6:
											while (true) {
												switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
												case OBRA:
													;
													break;
												default:
													jj_la1[3] = jj_gen;
													break label_6;
												}
												jj_consume_token(OBRA);
											}
										TableName3 = jj_consume_token(COLNAME);
										jj_consume_token(DOT);
										ColumnName3 = jj_consume_token(COLNAME);
										comparison2=jj_consume_token(BOOLEAN_COMPARISON);
										TableName4 = jj_consume_token(COLNAME);
										jj_consume_token(DOT);
										ColumnName4 = jj_consume_token(COLNAME);
										
										label_7:
											while (true) {
												switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
												case CBRA:
													;
													break;
												default:
													jj_la1[4] = jj_gen;
													  selectionNode_c = new SelectionNode(new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(TableName1.image, ColumnName1.image), new ExprTree.VarLeaf(TableName2.image, ColumnName2.image)));
														selectionNodeList.add(selectionNode_c);
													break label_7;
												}
												jj_consume_token(CBRA);
												//to change here
												if(comparison1.image.equals("=")&&comparison2.image.equals("="))
												{ selectionNode_c = new SelectionNode(new ExprTree(ExprTree.OpCode.AND, new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(TableName1.image, ColumnName1.image), new ExprTree.VarLeaf(TableName2.image, ColumnName2.image)), new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(TableName3.image, ColumnName3.image), new ExprTree.VarLeaf(TableName4.image, ColumnName4.image))));
												}else if( comparison1.image.equals("=")&&comparison2.image.equals("<")){ selectionNode_c = new SelectionNode(new ExprTree(ExprTree.OpCode.AND, new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(TableName1.image, ColumnName1.image), new ExprTree.VarLeaf(TableName2.image, ColumnName2.image)), new ExprTree(ExprTree.OpCode.LT, new ExprTree.VarLeaf(TableName3.image, ColumnName3.image), new ExprTree.VarLeaf(TableName4.image, ColumnName4.image))));
												}else{selectionNode_c = new SelectionNode(new ExprTree(ExprTree.OpCode.AND, new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(TableName1.image, ColumnName1.image), new ExprTree.VarLeaf(TableName2.image, ColumnName2.image)), new ExprTree(ExprTree.OpCode.LT, new ExprTree.VarLeaf(TableName3.image, ColumnName3.image), new ExprTree.VarLeaf(TableName4.image, ColumnName4.image))));
												}
												
												switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
												
												case BOOLEAN_OPERATORS:
													booleanOperator2=jj_consume_token(BOOLEAN_OPERATORS);
												jj_consume_token(OBRA);
												
												TableName5 = jj_consume_token(COLNAME);
												jj_consume_token(DOT);
												ColumnName5 = jj_consume_token(COLNAME);
												jj_consume_token(BOOLEAN_COMPARISON);
												TableName6 = jj_consume_token(COLNAME);
												jj_consume_token(DOT);
												ColumnName6 = jj_consume_token(COLNAME);
												jj_consume_token(CBRA);
												 selectionNode_c = new SelectionNode(new ExprTree(ExprTree.OpCode.AND, new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf("R", "B"), new ExprTree.VarLeaf("S", "B")), new ExprTree(ExprTree.OpCode.OR, new ExprTree(ExprTree.OpCode.GT, new ExprTree.VarLeaf("R", "A"), new ExprTree.VarLeaf("S", "C")), new ExprTree(ExprTree.OpCode.LT, new ExprTree.VarLeaf("R", "A"), new ExprTree.VarLeaf("S", "C")))));
												 
												case SEMICOLON:
													selectionNodeList.add(selectionNode_c);
													break label_7;}
										/*TableName3 = jj_consume_token(COLNAME);
										jj_consume_token(DOT);
										ColumnName3 = jj_consume_token(COLNAME);
										jj_consume_token(BOOLEAN_COMPARISON);
										TableName4 = jj_consume_token(COLNAME);
										jj_consume_token(DOT);
										ColumnName4 = jj_consume_token(COLNAME);*/
										//jj_consume_token(CBRA);
											//	jj_consume_token(SEMICOLON);
											//	jj_consume_token(0);		
										
									}
							}
						
						
						
								if(joinNodeList.size()==1)
								selectionNodeList.get(0).setChild(joinNodeList.get(0));
								else
								selectionNodeList.get(0).setChild(joinNodeList.get(joinNodeList.size()-1));	
						/*rhs_2 = (PlanNode)selectStatement();
						unionNode = new UnionNode();
						unionNode.setLHS(lhs_1);
						unionNode.setRHS(rhs_2);*/
						jj_consume_token(SEMICOLON);
						projectionNodeList.get(0).setChild(selectionNodeList.get(0));
						jj_consume_token(0);
						{if (true) return projectionNodeList.get(0);}

						break;
					}
					}
				label_3:
					while (true) {
						switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
						case JOIN:
							;
							break;
						default:
							jj_la1[5] = jj_gen;
							break label_3;
						}
						jj_consume_token(JOIN);
						TableName2 = jj_consume_token(COLNAME);
						ScanNode scanNode2 = new ScanNode(TableName2.image, TableName2.image, tables.get(TableName2.image));
						scanNodeList.add(scanNode1);
						joinNode_c = new JoinNode();
						joinNodeList.add(joinNode_c);
						
						jj_consume_token(ON);
						joinNodeList.get(0).setLHS(scanNodeList.get(0));
						joinNodeList.get(0).setRHS(scanNodeList.get(1));
						
						TableName1 = jj_consume_token(COLNAME);
						jj_consume_token(DOT);
						ColumnName1 = jj_consume_token(COLNAME);
						jj_consume_token(BOOLEAN_COMPARISON);
						TableName2 = jj_consume_token(COLNAME);
						jj_consume_token(DOT);
						ColumnName2 = jj_consume_token(COLNAME);
						 selectionNode_c = new SelectionNode(new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(TableName1.image, ColumnName1.image), new ExprTree.VarLeaf(TableName2.image, ColumnName2.image)));
						selectionNodeList.add(selectionNode_c);
						//setting child of selection node
						selectionNode_c.setChild(joinNodeList.get(0));
						
						
						
					}
				
				
				
				
				//jj_consume_token(SEMICOLON);
				//jj_consume_token(0);
				//childs_3 = new ScanNode(TableName1.image,TableName1.image , tables.get(TableName1.image));
				//lhs_1 = new ProjectionNode();
					
			/*	for(String entry:ColumnNames)
				{lhs_1.addColumn(new ProjectionNode.Column(entry, new ExprTree.VarLeaf(null, entry)));
				}//lhs_1.addColumn(new ProjectionNode.Column(ColumnNames.get(1), new ExprTree.VarLeaf(null, "B")));
				lhs_1.setChild(childs_3);
				{if (true) return lhs_1;}

				break;*/

				jj_consume_token(SEMICOLON);
				projectionNodeList.get(0).setChild(selectionNodeList.get(0));
				jj_consume_token(0);
				{if (true) return projectionNodeList.get(0);}

				break;
				
				

			case AGGREGATE:
				AggregateValue1 = jj_consume_token(AGGREGATE);
				AggregateNode aggregateNode_a;
				aggregateNode_a = new AggregateNode();
				jj_consume_token(OBRA);
				ColumnName = jj_consume_token(COLNAME);



				label_3:
					while (true) {
						switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
						case BINARYOPERATOR:
							;
							break;
						default:
							jj_la1[0] = jj_gen;
							break label_3;
						}
						binaryOperator=jj_consume_token(BINARYOPERATOR);
						noOfVarLeaf=2;
						ColumnName2 = jj_consume_token(COLNAME);
						if(binaryOperator.image.equals("+")){if(AggregateValue1.image.equals("SUM"))
						{
							aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree(ExprTree.OpCode.ADD, new ExprTree.VarLeaf(null,ColumnName.image), new ExprTree.VarLeaf(null, ColumnName2.image)),AggregateNode.AType.SUM));
						}else if(AggregateValue1.image.equals("AVG")) {
							aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Average", new ExprTree(ExprTree.OpCode.ADD, new ExprTree.VarLeaf(null,ColumnName.image), new ExprTree.VarLeaf(null, ColumnName2.image)),AggregateNode.AType.SUM));
						}else if(AggregateValue1.image.equals("MIN")){
							aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Min",new ExprTree(ExprTree.OpCode.ADD, new ExprTree.VarLeaf(null,ColumnName.image), new ExprTree.VarLeaf(null, ColumnName2.image)),AggregateNode.AType.SUM));
						}else if(AggregateValue1.image.equals("MAX")){
							aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Max", new ExprTree(ExprTree.OpCode.ADD, new ExprTree.VarLeaf(null,ColumnName.image), new ExprTree.VarLeaf(null, ColumnName2.image)),AggregateNode.AType.SUM));
						}}else if (binaryOperator.image.equals("*")){if(AggregateValue1.image.equals("SUM"))
						{
							aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree(ExprTree.OpCode.MULT, new ExprTree.VarLeaf(null,ColumnName.image), new ExprTree.VarLeaf(null, ColumnName2.image)),AggregateNode.AType.SUM));
						}else if(AggregateValue1.image.equals("AVG")) {
							aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Average", new ExprTree(ExprTree.OpCode.MULT, new ExprTree.VarLeaf(null,ColumnName.image), new ExprTree.VarLeaf(null, ColumnName2.image)),AggregateNode.AType.SUM));
						}else if(AggregateValue1.image.equals("MIN")){
							aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Min",new ExprTree(ExprTree.OpCode.MULT, new ExprTree.VarLeaf(null,ColumnName.image), new ExprTree.VarLeaf(null, ColumnName2.image)),AggregateNode.AType.SUM));
						}else if(AggregateValue1.image.equals("MAX")){
							aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Max", new ExprTree(ExprTree.OpCode.MULT, new ExprTree.VarLeaf(null,ColumnName.image), new ExprTree.VarLeaf(null, ColumnName2.image)),AggregateNode.AType.SUM));
						}}
					}
				jj_consume_token(CBRA);
				if(noOfVarLeaf==1){if(AggregateValue1.image.equals("SUM"))
				{
					aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree.VarLeaf(null, ColumnName.image),AggregateNode.AType.SUM));
				}else if(AggregateValue1.image.equals("AVG")) {
					aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Average", new ExprTree.VarLeaf(null, ColumnName.image),AggregateNode.AType.SUM));
				}else if(AggregateValue1.image.equals("MIN")){
					aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Min", new ExprTree.VarLeaf(null, ColumnName.image),AggregateNode.AType.SUM));
				}else if(AggregateValue1.image.equals("MAX")){
					aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Max", new ExprTree.VarLeaf(null, ColumnName.image),AggregateNode.AType.SUM));
				}}

				label_4:
					while (true) {
						switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
						case COMMA:
							;
							break;
						default:
							jj_la1[1] = jj_gen;
							break label_4;
						}
						jj_consume_token(COMMA);

						AggregateValue2 = jj_consume_token(AGGREGATE);
						jj_consume_token(OBRA);
						ColumnName = jj_consume_token(COLNAME);


						label_5:
							while (true) {
								switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
								case BINARYOPERATOR:
									;
									break;
								default:
									jj_la1[2] = jj_gen;
									break label_5;
								}
								binaryOperator=jj_consume_token(BINARYOPERATOR);
								noOfVarLeaf=2;
								ColumnName2 = jj_consume_token(COLNAME); if(binaryOperator.image.equals("+")){if(AggregateValue2.image.equals("SUM"))
								{
									aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree(ExprTree.OpCode.ADD, new ExprTree.VarLeaf(null,ColumnName.image), new ExprTree.VarLeaf(null, ColumnName2.image)),AggregateNode.AType.SUM));
								}else if(AggregateValue2.image.equals("AVG")) {
									aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Average", new ExprTree(ExprTree.OpCode.ADD, new ExprTree.VarLeaf(null,ColumnName.image), new ExprTree.VarLeaf(null, ColumnName2.image)),AggregateNode.AType.SUM));
								}else if(AggregateValue2.image.equals("MIN")){
									aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Min",new ExprTree(ExprTree.OpCode.ADD, new ExprTree.VarLeaf(null,ColumnName.image), new ExprTree.VarLeaf(null, ColumnName2.image)),AggregateNode.AType.SUM));
								}else if(AggregateValue2.image.equals("MAX")){
									aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Max", new ExprTree(ExprTree.OpCode.ADD, new ExprTree.VarLeaf(null,ColumnName.image), new ExprTree.VarLeaf(null, ColumnName2.image)),AggregateNode.AType.SUM));
								}}else if (binaryOperator.image.equals("*")){if(AggregateValue2.image.equals("SUM"))
								{
									aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree(ExprTree.OpCode.MULT, new ExprTree.VarLeaf(null,ColumnName.image), new ExprTree.VarLeaf(null, ColumnName2.image)),AggregateNode.AType.SUM));
								}else if(AggregateValue2.image.equals("AVG")) {
									aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Average", new ExprTree(ExprTree.OpCode.MULT, new ExprTree.VarLeaf(null,ColumnName.image), new ExprTree.VarLeaf(null, ColumnName2.image)),AggregateNode.AType.SUM));
								}else if(AggregateValue2.image.equals("MIN")){
									aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Min",new ExprTree(ExprTree.OpCode.MULT, new ExprTree.VarLeaf(null,ColumnName.image), new ExprTree.VarLeaf(null, ColumnName2.image)),AggregateNode.AType.SUM));
								}else if(AggregateValue2.image.equals("MAX")){
									aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Max", new ExprTree(ExprTree.OpCode.MULT, new ExprTree.VarLeaf(null,ColumnName.image), new ExprTree.VarLeaf(null, ColumnName2.image)),AggregateNode.AType.SUM));
								}}
							}
						jj_consume_token(CBRA);
						if(noOfVarLeaf==1){if(AggregateValue2.image.equals("SUM"))
						{
							aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Sum", new ExprTree.VarLeaf(null, ColumnName.image),AggregateNode.AType.SUM));
						}else if(AggregateValue2.image.equals("AVG")) {
							aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Average", new ExprTree.VarLeaf(null, ColumnName.image),AggregateNode.AType.SUM));
						}else if(AggregateValue2.image.equals("MIN")){
							aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Min", new ExprTree.VarLeaf(null, ColumnName.image),AggregateNode.AType.SUM));
						}else if(AggregateValue2.image.equals("MAX")){
							aggregateNode_a.addAggregate(new AggregateNode.AggColumn("Max", new ExprTree.VarLeaf(null, ColumnName.image),AggregateNode.AType.SUM));
						}}
					}
				jj_consume_token(FROM);
				TableName1 = jj_consume_token(COLNAME);
				TAblelist.add(TableName1.image);
				label_6:
					while (true) {
						switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
						case COMMA:
							;
							break;
						default:
							jj_la1[3] = jj_gen;
							break label_6;
						}
						jj_consume_token(COMMA);
						joinNode_c = new JoinNode();
						joinNodeList.add(joinNode_c);
						TableName2 = jj_consume_token(COLNAME);
						TAblelist.add(TableName2.image);
					}
				label_7:
					while (true) {
						switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
						case WHERE:
							;
							break;
						default:
							jj_la1[4] = jj_gen;
							break label_7;
						}
						jj_consume_token(WHERE);
						label_8:
							while (true) {
								switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
								case OBRA:
									;
									break;
								default:
									jj_la1[5] = jj_gen;
									break label_8;
								}
								jj_consume_token(OBRA);
								noBool=1;
							}
						TableName1 = jj_consume_token(COLNAME);
						jj_consume_token(DOT);
						ColumnName1 = jj_consume_token(COLNAME);
						jj_consume_token(BOOLEAN_COMPARISON);
						TableName2 = jj_consume_token(COLNAME);
						jj_consume_token(DOT);
						ColumnName2 = jj_consume_token(COLNAME);  if(noBool==0){ selectionNode_c = new SelectionNode(new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(TableName1.image, ColumnName1.image), new ExprTree.VarLeaf(TableName2.image, ColumnName2.image)));
						selectionNodeList.add(selectionNode_c);}

						label_9:
							while (true) {
								switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
								case CBRA:
									;
									break;
								default:
									jj_la1[6] = jj_gen;
									break label_9;
								}
								jj_consume_token(CBRA);

								booleanOperator=jj_consume_token(BOOLEAN_OPERATORS);
								jj_consume_token(OBRA);
								TableName3 = jj_consume_token(COLNAME);
								jj_consume_token(DOT);
								ColumnName3 = jj_consume_token(COLNAME);
								jj_consume_token(BOOLEAN_COMPARISON);
								TableName4 = jj_consume_token(COLNAME);
								jj_consume_token(DOT);
								ColumnName4 = jj_consume_token(COLNAME);
								jj_consume_token(CBRA);

								if(booleanOperator.image.equals("AND")){ selectionNode_c=new SelectionNode(new ExprTree(ExprTree.OpCode.AND, new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(TableName1.image, ColumnName1.image), new ExprTree.VarLeaf(TableName2.image, ColumnName2.image)), new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(TableName3.image, ColumnName3.image), new ExprTree.VarLeaf(TableName4.image, ColumnName4.image))));selectionNodeList.add(selectionNode_c);}

							}
					}
					jj_consume_token(SEMICOLON);for(String tableName:TAblelist)
					{ scanNode_c = new ScanNode(tableName, tableName, tables.get(tableName));
					scanNodeList.add(scanNode_c);
					}
					if(joinNodeList.size()>0)
					{joinNodeList.get(0).setLHS(scanNodeList.get(0));
					joinNodeList.get(0).setRHS(scanNodeList.get(1));
					for(int i=2;i<scanNodeList.size();i++)
					{
						joinNodeList.get(i-1).setLHS(joinNodeList.get(i-2));
						joinNodeList.get(i-1).setRHS(scanNodeList.get(i));
					}}
					if(joinNodeList.size()==1 && selectionNodeList.size()==0)
					{
						//aggregateNode_c.addAggregate(new AggregateNode.AggColumn("Count", new ExprTree.ConstLeaf(1),AggregateNode.AType.COUNT));
						aggregateNode_a.setChild(joinNodeList.get(0));
					}
					else if (joinNodeList.size()==1 && selectionNodeList.size()>0)
					{
						selectionNodeList.get(0).setChild(joinNodeList.get(0));
						//aggregateNode_c.addAggregate(new AggregateNode.AggColumn("Count", new ExprTree.ConstLeaf(1),AggregateNode.AType.COUNT));
						aggregateNode_a.setChild(selectionNodeList.get(0));
					}
					else if (joinNodeList.size()>1){
						selectionNodeList.get(0).setChild(joinNodeList.get(joinNodeList.size()-1));	
						aggregateNode_a.setChild(selectionNodeList.get(0));
					}
					else{
						aggregateNode_a.setChild(scanNodeList.get(0));
					}

					{if (true) return aggregateNode_a;}

					break;
			case COUNT:
				AggregateValue = jj_consume_token(COUNT);
				AggregateNode aggregateNode_c;
				jj_consume_token(OBRA);
				jj_consume_token(BINARYOPERATOR);
				jj_consume_token(CBRA);
				jj_consume_token(FROM);
				TableName1 = jj_consume_token(COLNAME);
				TAblelist.add(TableName1.image);

				label_1:
					while (true) {
						switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
						case COMMA:
							;
							break;
						default:
							jj_la1[0] = jj_gen;
							break label_1;
						}
						jj_consume_token(COMMA);
						joinNode_c = new JoinNode();
						joinNodeList.add(joinNode_c);
						TableName2 = jj_consume_token(COLNAME);
						TAblelist.add(TableName2.image);
					}label_4:
						while (true) {
							switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
							case WHERE:
								;
								break;
							default:
								jj_la1[1] = jj_gen;
								break label_4;
							}
							jj_consume_token(WHERE);
							label_5:
								while (true) {
									switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
									case OBRA:
										;
										break;
									default:
										jj_la1[2] = jj_gen;
										break label_5;
									}
									jj_consume_token(OBRA);
								}
							TableName1 = jj_consume_token(COLNAME);
							jj_consume_token(DOT);
							ColumnName1 = jj_consume_token(COLNAME);
							jj_consume_token(BOOLEAN_COMPARISON);
							TableName2 = jj_consume_token(COLNAME);
							jj_consume_token(DOT);
							ColumnName2 = jj_consume_token(COLNAME);
							 selectionNode_c = new SelectionNode(new ExprTree(ExprTree.OpCode.EQ, new ExprTree.VarLeaf(TableName1.image, ColumnName1.image), new ExprTree.VarLeaf(TableName2.image, ColumnName2.image)));
							selectionNodeList.add(selectionNode_c);
							label_6:
								while (true) {
									switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
									case CBRA:
										;
										break;
									default:
										jj_la1[3] = jj_gen;
										break label_6;
									}
									jj_consume_token(CBRA);
									jj_consume_token(BOOLEAN_OPERATORS);
									jj_consume_token(OBRA);
									TableName3 = jj_consume_token(COLNAME);
									jj_consume_token(DOT);
									ColumnName3 = jj_consume_token(COLNAME);
									jj_consume_token(BOOLEAN_COMPARISON);
									TableName4 = jj_consume_token(COLNAME);
									jj_consume_token(DOT);
									ColumnName4 = jj_consume_token(COLNAME);
									jj_consume_token(CBRA);
								}
						}
					jj_consume_token(SEMICOLON);
					//to write here
					//ScanNode[] scanNode_c=new ScanNode[]{};
					for(String tableName:TAblelist)
					{ scanNode_c = new ScanNode(tableName, tableName, tables.get(tableName));
					scanNodeList.add(scanNode_c);
					}
					if(joinNodeList.size()>0){
						joinNodeList.get(0).setLHS(scanNodeList.get(0));
						joinNodeList.get(0).setRHS(scanNodeList.get(1));
						for(int i=2;i<scanNodeList.size();i++)
						{
							joinNodeList.get(i-1).setLHS(joinNodeList.get(i-2));
							joinNodeList.get(i-1).setRHS(scanNodeList.get(i));
						}}
					if(joinNodeList.size()==1 && selectionNodeList.size()==0)
					{
						aggregateNode_c = new AggregateNode();
						aggregateNode_c.addAggregate(new AggregateNode.AggColumn("Count", new ExprTree.ConstLeaf(1),AggregateNode.AType.COUNT));
						aggregateNode_c.setChild(joinNodeList.get(0));
					}
					else if (joinNodeList.size()==1 && selectionNodeList.size()>0)
					{
						selectionNodeList.get(0).setChild(joinNodeList.get(0));
						aggregateNode_c = new AggregateNode();
						aggregateNode_c.addAggregate(new AggregateNode.AggColumn("Count", new ExprTree.ConstLeaf(1),AggregateNode.AType.COUNT));
						aggregateNode_c.setChild(selectionNodeList.get(0));
					}
					else{
						aggregateNode_c = new AggregateNode();
						aggregateNode_c.addAggregate(new AggregateNode.AggColumn("Count", new ExprTree.ConstLeaf(1),AggregateNode.AType.COUNT));

						aggregateNode_c.setChild(scanNodeList.get(0));
					}

					{if (true) return aggregateNode_c;}
					break;
			default:
				jj_la1[0] = jj_gen;
				jj_consume_token(-1);
			}
			throw new ParseException();
			//throw new Error("Missing return statement in function");
		}
		//to remove this
		}
		}
		return q;}//to remove this

		final public HashMap<String, Schema.TableFromFile> createTableStatement() throws ParseException {
			Token TableName;
			Token ColumnName;
			Token DataType;
			Token FileName;
			TableStruct tableStruct;
			ArrayList<TableStruct> tableList = new ArrayList<TableStruct>();
			label_1:
				while (true) {
					switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
					case CTCMD:
						;
						break;
					default:
						jj_la1[1] = jj_gen;
						break label_1;
					}
					jj_consume_token(CTCMD);
					TableName = jj_consume_token(COLNAME);
					tableStruct = new TableStruct();
					tableStruct.TableName=TableName.image;
					jj_consume_token(OBRA);
					/*(
          ColumnName=< COLNAME>
        DataType=<DATATYPE>
        < COMMA>)**/
					tableStruct.Variables = Variables();
					jj_consume_token(CBRA);
					jj_consume_token(FROM);
					jj_consume_token(FILE);
					FileName = jj_consume_token(FILENAME);
					tableStruct.FileName=FileName.image.substring(1, FileName.image.length()-1);
					//tableStruct.FileName="test/r.dat";
					jj_consume_token(USING);
					jj_consume_token(CSV);
					jj_consume_token(SEMICOLON);
					tableList.add (tableStruct) ;
					jj_ntk();
				}
			HashMap<String, Schema.TableFromFile> tables
			= new HashMap<String, Schema.TableFromFile>();

			for(TableStruct entry : tableList) 
			{
				Schema.TableFromFile table_S;
				table_S = new Schema.TableFromFile(new File(entry.FileName));
				for(String hashmapkey: entry.Variables.keySet() )
				{if(entry.Variables.get(hashmapkey).equals("int")){
					table_S.add(new Schema.Column(entry.TableName, hashmapkey, Schema.Type.INT));}
				}
				tables.put(entry.TableName, table_S);}
			return tables;
		}

		final public HashMap Variables() throws ParseException {
			Token TName;
			Token TType;
			HashMap<String,String> var = new HashMap<String, String>();
			label_2:
				while (true) {
					switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
					case COLNAME:
						;
						break;
					default:
						jj_la1[2] = jj_gen;
						break label_2;
					}
					TName = jj_consume_token(COLNAME);
					TType = DType();
					label_3:
						while (true) {
							switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
							case COMMA:
								;
								break;
							default:
								jj_la1[3] = jj_gen;
								break label_3;
							}
							jj_consume_token(COMMA);
						}
					var.put(TName.image,TType.image);
				}
			{if (true) return var;}
			throw new Error("Missing return statement in function");
		}

		final public Token DType() throws ParseException {
			Token TDType;
			TDType = jj_consume_token(DATATYPE);
			switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
			case OBRA:
				jj_consume_token(OBRA);
				jj_consume_token(FLOATING_POINT_LITERAL);
				jj_consume_token(CBRA);
				break;
			default:
				jj_la1[3] = jj_gen;
				;
			}
			{if (true) return TDType;}
			throw new Error("Missing return statement in function");
		}

		/** Generated Token Manager. */
		public SqlParserTokenManager token_source;
		SimpleCharStream jj_input_stream;
		/** Current token. */
		public Token token;
		/** Next token. */
		public Token jj_nt;
		private int jj_ntk;
		private int jj_gen;
		final private int[] jj_la1 = new int[16];
		static private int[] jj_la1_0;
		static private int[] jj_la1_1;
		static {
			jj_la1_init_0();
			jj_la1_init_1();
		}
		private static void jj_la1_init_0() {
			jj_la1_0 = new int[] {0xc2913300,0x80,0x4000000,0x200000,};
		}
		private static void jj_la1_init_1() {
			jj_la1_1 = new int[] {0x2,0x0,0x0,0x0,};
		}

		/** Constructor with InputStream. */
		public SqlParser(java.io.InputStream stream) {
			this(stream, null);
		}
		/** Constructor with InputStream and supplied encoding */
		public SqlParser(java.io.InputStream stream, String encoding) {
			try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
			token_source = new SqlParserTokenManager(jj_input_stream);
			token = new Token();
			jj_ntk = -1;
			jj_gen = 0;
			for (int i = 0; i < 4; i++) jj_la1[i] = -1;
		}

		/** Reinitialise. */
		public void ReInit(java.io.InputStream stream) {
			ReInit(stream, null);
		}
		/** Reinitialise. */
		public void ReInit(java.io.InputStream stream, String encoding) {
			try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
			token_source.ReInit(jj_input_stream);
			token = new Token();
			jj_ntk = -1;
			jj_gen = 0;
			for (int i = 0; i < 4; i++) jj_la1[i] = -1;
		}

		/** Constructor. */
		public SqlParser(java.io.Reader stream) {
			jj_input_stream = new SimpleCharStream(stream, 1, 1);
			token_source = new SqlParserTokenManager(jj_input_stream);
			token = new Token();
			jj_ntk = -1;
			jj_gen = 0;
			for (int i = 0; i < 4; i++) jj_la1[i] = -1;
		}

		/** Reinitialise. */
		public void ReInit(java.io.Reader stream) {
			jj_input_stream.ReInit(stream, 1, 1);
			token_source.ReInit(jj_input_stream);
			token = new Token();
			jj_ntk = -1;
			jj_gen = 0;
			for (int i = 0; i < 4; i++) jj_la1[i] = -1;
		}

		/** Constructor with generated Token Manager. */
		public SqlParser(SqlParserTokenManager tm) {
			token_source = tm;
			token = new Token();
			jj_ntk = -1;
			jj_gen = 0;
			for (int i = 0; i < 4; i++) jj_la1[i] = -1;
		}

		/** Reinitialise. */
		public void ReInit(SqlParserTokenManager tm) {
			token_source = tm;
			token = new Token();
			jj_ntk = -1;
			jj_gen = 0;
			for (int i = 0; i < 4; i++) jj_la1[i] = -1;
		}

		private Token jj_consume_token(int kind) throws ParseException {
			Token oldToken;
			if ((oldToken = token).next != null) token = token.next;
			else token = token.next = token_source.getNextToken();
			jj_ntk = -1;
			if (token.kind == kind) {
				jj_gen++;
				return token;
			}
			token = oldToken;
			jj_kind = kind;
			throw generateParseException();
		}


		/** Get the next Token. */
		final public Token getNextToken() {
			if (token.next != null) token = token.next;
			else token = token.next = token_source.getNextToken();
			jj_ntk = -1;
			jj_gen++;
			return token;
		}

		/** Get the specific Token. */
		final public Token getToken(int index) {
			Token t = token;
			for (int i = 0; i < index; i++) {
				if (t.next != null) t = t.next;
				else t = t.next = token_source.getNextToken();
			}
			return t;
		}

		private int jj_ntk() {
			if ((jj_nt=token.next) == null)
				return (jj_ntk = (token.next=token_source.getNextToken()).kind);
			else
				return (jj_ntk = jj_nt.kind);
		}

		private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
		private int[] jj_expentry;
		private int jj_kind = -1;

		/** Generate ParseException. */
		public ParseException generateParseException() {
			jj_expentries.clear();
			boolean[] la1tokens = new boolean[34];
			if (jj_kind >= 0) {
				la1tokens[jj_kind] = true;
				jj_kind = -1;
			}
			for (int i = 0; i < 4; i++) {
				if (jj_la1[i] == jj_gen) {
					for (int j = 0; j < 32; j++) {
						if ((jj_la1_0[i] & (1<<j)) != 0) {
							la1tokens[j] = true;
						}
						if ((jj_la1_1[i] & (1<<j)) != 0) {
							la1tokens[32+j] = true;
						}
					}
				}
			}
			for (int i = 0; i < 34; i++) {
				if (la1tokens[i]) {
					jj_expentry = new int[1];
					jj_expentry[0] = i;
					jj_expentries.add(jj_expentry);
				}
			}
			int[][] exptokseq = new int[jj_expentries.size()][];
			for (int i = 0; i < jj_expentries.size(); i++) {
				exptokseq[i] = jj_expentries.get(i);
			}
			return new ParseException(token, exptokseq, tokenImage);
		}

		/** Enable tracing. */
		final public void enable_tracing() {
		}

		/** Disable tracing. */
		final public void disable_tracing() {
		}

	}
